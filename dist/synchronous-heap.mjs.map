{"version":3,"file":"synchronous-heap.mjs","sources":["../src/heap.ts","../src/maxHeap.ts","../src/synchronous-heap.ts","../src/index.ts"],"sourcesContent":["/**\n * @license MIT\n * @copyright 2020 Eyas Ranjous <eyas.ranjous@gmail.com>\n *\n * @class\n */\n export class Heap {\n    /**\n     * @param {function} compare\n     * @param {array} [_values]\n     * @param {number|string|object} [_leaf]\n     */\n\n    private _leaf: any;\n    private _compare: any;\n    private _nodes: any;\n\n    constructor(compare : any, _values ?: any, _leaf ?: any) {\n      if (typeof compare !== 'function') {\n        throw new Error('Heap constructor expects a compare function');\n      }\n      this._compare = compare;\n      this._nodes = Array.isArray(_values) ? _values : [];\n      this._leaf = _leaf || null;\n    }\n  \n    /**\n     * Checks if a parent has a left child\n     * @private\n     */\n    _hasLeftChild(parentIndex : any) {\n      const leftChildIndex = (parentIndex * 2) + 1;\n      return leftChildIndex < this.size();\n    }\n  \n    /**\n     * Checks if a parent has a right child\n     * @private\n     */\n    _hasRightChild(parentIndex : any) {\n      const rightChildIndex = (parentIndex * 2) + 2;\n      return rightChildIndex < this.size();\n    }\n  \n    /**\n     * Compares two nodes\n     * @private\n     */\n    _compareAt(i : any, j : any) {\n      return this._compare(this._nodes[i], this._nodes[j]);\n    }\n  \n    /**\n     * Swaps two nodes in the heap\n     * @private\n     */\n    _swap(i : any, j : any) {\n      const temp = this._nodes[i];\n      this._nodes[i] = this._nodes[j];\n      this._nodes[j] = temp;\n    }\n  \n    /**\n     * Checks if parent and child should be swapped\n     * @private\n     */\n    _shouldSwap(parentIndex : any, childIndex : any) {\n      if (parentIndex < 0 || parentIndex >= this.size()) {\n        return false;\n      }\n  \n      if (childIndex < 0 || childIndex >= this.size()) {\n        return false;\n      }\n  \n      return this._compareAt(parentIndex, childIndex) > 0;\n    }\n  \n    /**\n     * Compares children of a parent\n     * @private\n     */\n    _compareChildrenOf(parentIndex : any) {\n      if (!this._hasLeftChild(parentIndex) && !this._hasRightChild(parentIndex)) {\n        return -1;\n      }\n  \n      const leftChildIndex = (parentIndex * 2) + 1;\n      const rightChildIndex = (parentIndex * 2) + 2;\n  \n      if (!this._hasLeftChild(parentIndex)) {\n        return rightChildIndex;\n      }\n  \n      if (!this._hasRightChild(parentIndex)) {\n        return leftChildIndex;\n      }\n  \n      const compare = this._compareAt(leftChildIndex, rightChildIndex);\n      return compare > 0 ? rightChildIndex : leftChildIndex;\n    }\n  \n    /**\n     * Compares two children before a position\n     * @private\n     */\n    _compareChildrenBefore(index : any, leftChildIndex : any, rightChildIndex : any) {\n      const compare = this._compareAt(rightChildIndex, leftChildIndex);\n  \n      if (compare <= 0 && rightChildIndex < index) {\n        return rightChildIndex;\n      }\n  \n      return leftChildIndex;\n    }\n  \n    /**\n     * Recursively bubbles up a node if it's in a wrong position\n     * @private\n     */\n    _heapifyUp(startIndex : any) {\n      let childIndex = startIndex;\n      let parentIndex = Math.floor((childIndex - 1) / 2);\n  \n      while (this._shouldSwap(parentIndex, childIndex)) {\n        this._swap(parentIndex, childIndex);\n        childIndex = parentIndex;\n        parentIndex = Math.floor((childIndex - 1) / 2);\n      }\n    }\n  \n    /**\n     * Recursively bubbles down a node if it's in a wrong position\n     * @private\n     */\n    _heapifyDown(startIndex : any) {\n      let parentIndex = startIndex;\n      let childIndex = this._compareChildrenOf(parentIndex);\n  \n      while (this._shouldSwap(parentIndex, childIndex)) {\n        this._swap(parentIndex, childIndex);\n        parentIndex = childIndex;\n        childIndex = this._compareChildrenOf(parentIndex);\n      }\n    }\n  \n    /**\n     * Recursively bubbles down a node before a given index\n     * @private\n     */\n    _heapifyDownUntil(index : any) {\n      let parentIndex = 0;\n      let leftChildIndex = 1;\n      let rightChildIndex = 2;\n      let childIndex;\n  \n      while (leftChildIndex < index) {\n        childIndex = this._compareChildrenBefore(\n          index,\n          leftChildIndex,\n          rightChildIndex\n        );\n  \n        if (this._shouldSwap(parentIndex, childIndex)) {\n          this._swap(parentIndex, childIndex);\n        }\n  \n        parentIndex = childIndex;\n        leftChildIndex = (parentIndex * 2) + 1;\n        rightChildIndex = (parentIndex * 2) + 2;\n      }\n    }\n  \n    /**\n     * Inserts a new value into the heap\n     * @public\n     * @param {number|string|object} value\n     * @returns {Heap}\n     */\n    insert(value : any) {\n      this._nodes.push(value);\n      this._heapifyUp(this.size() - 1);\n      if (this._leaf === null || this._compare(value, this._leaf) > 0) {\n        this._leaf = value;\n      }\n      return this;\n    }\n  \n    /**\n     * Inserts a new value into the heap\n     * @public\n     * @param {number|string|object} value\n     * @returns {Heap}\n     */\n    push(value : any) {\n      return this.insert(value);\n    }\n  \n    /**\n     * Removes and returns the root node in the heap\n     * @public\n     * @returns {number|string|object}\n     */\n    extractRoot() {\n      if (this.isEmpty()) {\n        return null;\n      }\n  \n      const root = this.root();\n      this._nodes[0] = this._nodes[this.size() - 1];\n      this._nodes.pop();\n      this._heapifyDown(0);\n  \n      if (root === this._leaf) {\n        this._leaf = this.root();\n      }\n  \n      return root;\n    }\n  \n    /**\n     * Removes and returns the root node in the heap\n     * @public\n     * @returns {number|string|object}\n     */\n    pop() {\n      return this.extractRoot();\n    }\n  \n    /**\n     * Applies heap sort and return the values sorted by priority\n     * @public\n     * @returns {array}\n     */\n    sort() {\n      for (let i = this.size() - 1; i > 0; i -= 1) {\n        this._swap(0, i);\n        this._heapifyDownUntil(i);\n      }\n      return this._nodes;\n    }\n  \n    /**\n     * Fixes node positions in the heap\n     * @public\n     * @returns {Heap}\n     */\n    fix() {\n      for (let i = 0; i < this.size(); i += 1) {\n        this._heapifyUp(i);\n      }\n      return this;\n    }\n  \n    /**\n     * Verifies that all heap nodes are in the right position\n     * @public\n     * @returns {boolean}\n     */\n    isValid() {\n      const isValidRecursive : any = (parentIndex : any) => {\n        let isValidLeft = true;\n        let isValidRight = true;\n  \n        if (this._hasLeftChild(parentIndex)) {\n          const leftChildIndex = (parentIndex * 2) + 1;\n          if (this._compareAt(parentIndex, leftChildIndex) > 0) {\n            return false;\n          }\n          isValidLeft = isValidRecursive(leftChildIndex);\n        }\n  \n        if (this._hasRightChild(parentIndex)) {\n          const rightChildIndex = (parentIndex * 2) + 2;\n          if (this._compareAt(parentIndex, rightChildIndex) > 0) {\n            return false;\n          }\n          isValidRight = isValidRecursive(rightChildIndex);\n        }\n  \n        return isValidLeft && isValidRight;\n      };\n  \n      return isValidRecursive(0);\n    }\n  \n    /**\n     * Returns a shallow copy of the heap\n     * @public\n     * @returns {Heap}\n     */\n    clone() {\n      return new Heap(this._compare, this._nodes.slice(), this._leaf);\n    }\n  \n    /**\n     * Returns the root node in the heap\n     * @public\n     * @returns {number|string|object}\n     */\n    root() {\n      if (this.isEmpty()) {\n        return null;\n      }\n  \n      return this._nodes[0];\n    }\n  \n    /**\n     * Returns the root node in the heap\n     * @public\n     * @returns {number|string|object}\n     */\n    top() {\n      return this.root();\n    }\n  \n    /**\n     * Returns a leaf node in the heap\n     * @public\n     * @returns {number|string|object}\n     */\n    leaf() {\n      return this._leaf;\n    }\n  \n    /**\n     * Returns the number of nodes in the heap\n     * @public\n     * @returns {number}\n     */\n    size() {\n      return this._nodes.length;\n    }\n  \n    /**\n     * Checks if the heap is empty\n     * @public\n     * @returns {boolean}\n     */\n    isEmpty() {\n      return this.size() === 0;\n    }\n  \n    /**\n     * Clears the heap\n     * @public\n     */\n    clear() {\n      this._nodes = [];\n      this._leaf = null;\n    }\n  \n    /**\n     * Builds a heap from a array of values\n     * @public\n     * @static\n     * @param {array} values\n     * @param {function} compare\n     * @returns {Heap}\n     */\n    static heapify(values : any, compare : any) {\n      if (!Array.isArray(values)) {\n        throw new Error('Heap.heapify expects an array of values');\n      }\n  \n      if (typeof compare !== 'function') {\n        throw new Error('Heap.heapify expects a compare function');\n      }\n  \n      return new Heap(compare, values).fix();\n    }\n  \n    /**\n     * Checks if a list of values is a valid heap\n     * @public\n     * @static\n     * @param {array} values\n     * @param {function} compare\n     * @returns {boolean}\n     */\n    static isHeapified(values : any, compare : any) {\n      return new Heap(compare, values).isValid();\n    }\n  }","/**\n * @license MIT\n * @copyright 2020 Eyas Ranjous <eyas.ranjous@gmail.com>\n */\n\n import { Heap } from './heap';\n\n const getMaxCompare = (getCompareValue : any) => (a : any, b : any) => {\n   const aVal = typeof getCompareValue === 'function' ? getCompareValue(a) : a;\n   const bVal = typeof getCompareValue === 'function' ? getCompareValue(b) : b;\n   return aVal < bVal ? 1 : -1;\n };\n \n /**\n  * @class MaxHeap\n  * @extends Heap\n  */\n export class MaxHeap {\n   /**\n    * @param {function} [getCompareValue]\n    * @param {Heap} [_heap]\n    */\n  private _getCompareValue : any;\n  private _heap : any;\n\n   constructor(getCompareValue : any, _heap ?: any) {\n     this._getCompareValue = getCompareValue;\n     this._heap = _heap || new Heap(getMaxCompare(getCompareValue));\n   }\n \n   /**\n    * Inserts a new value into the heap\n    * @public\n    * @param {number|string|object} value\n    * @returns {MaxHeap}\n    */\n   insert(value : any) {\n     return this._heap.insert(value);\n   }\n \n   /**\n    * Inserts a new value into the heap\n    * @public\n    * @param {number|string|object} value\n    * @returns {Heap}\n    */\n   push(value : any) {\n     return this.insert(value);\n   }\n \n   /**\n    * Removes and returns the root node in the heap\n    * @public\n    * @returns {number|string|object}\n    */\n   extractRoot() {\n     return this._heap.extractRoot();\n   }\n \n   /**\n    * Removes and returns the root node in the heap\n    * @public\n    * @returns {number|string|object}\n    */\n   pop() {\n     return this.extractRoot();\n   }\n \n   /**\n    * Applies heap sort and return the values sorted by priority\n    * @public\n    * @returns {array}\n    */\n   sort() {\n     return this._heap.sort();\n   }\n \n   /**\n    * Fixes node positions in the heap\n    * @public\n    * @returns {MaxHeap}\n    */\n   fix() {\n     return this._heap.fix();\n   }\n \n   /**\n    * Verifies that all heap nodes are in the right position\n    * @public\n    * @returns {boolean}\n    */\n   isValid() {\n     return this._heap.isValid();\n   }\n \n   /**\n    * Returns the root node in the heap\n    * @public\n    * @returns {number|string|object}\n    */\n   root() {\n     return this._heap.root();\n   }\n \n   /**\n    * Returns the root node in the heap\n    * @public\n    * @returns {number|string|object}\n    */\n   top() {\n     return this.root();\n   }\n \n   /**\n    * Returns a leaf node in the heap\n    * @public\n    * @returns {number|string|object}\n    */\n   leaf() {\n     return this._heap.leaf();\n   }\n \n   /**\n    * Returns the number of nodes in the heap\n    * @public\n    * @returns {number}\n    */\n   size() {\n     return this._heap.size();\n   }\n \n   /**\n    * Checks if the heap is empty\n    * @public\n    * @returns {boolean}\n    */\n   isEmpty() {\n     return this._heap.isEmpty();\n   }\n \n   /**\n    * Clears the heap\n    * @public\n    */\n   clear() {\n     this._heap.clear();\n   }\n \n   /**\n    * Returns a shallow copy of the MaxHeap\n    * @public\n    * @returns {MaxHeap}\n    */\n   clone() {\n     return new MaxHeap(this._getCompareValue, this._heap.clone());\n   }\n \n   /**\n    * Builds a MaxHeap from an array\n    * @public\n    * @static\n    * @param {array} values\n    * @param {function} [getCompareValue]\n    * @returns {MaxHeap}\n    */\n   static heapify(values : any, getCompareValue : any) {\n     if (!Array.isArray(values)) {\n       throw new Error('MaxHeap.heapify expects an array');\n     }\n     const heap = new Heap(getMaxCompare(getCompareValue), values);\n     return new MaxHeap(getCompareValue, heap).fix();\n   }\n \n   /**\n    * Checks if a list of values is a valid max heap\n    * @public\n    * @static\n    * @param {array} values\n    * @param {function} [getCompareValue]\n    * @returns {boolean}\n    */\n   static isHeapified(values : any, getCompareValue : any) {\n     const heap = new Heap(getMaxCompare(getCompareValue), values);\n     return new MaxHeap(getCompareValue, heap).isValid();\n   }\n }\n","import { Heap } from './heap';\nimport { MaxHeap } from './maxHeap';\n\nexport class SYNCHRONOUSHEAP {\n\n}\n\nconst bidsHeap = new MaxHeap((bid:any) => bid.value);\n","import { SYNCHRONOUSHEAP } from './synchronous-heap';\nexport default {\n\tSynchronousHeap: SYNCHRONOUSHEAP\n}"],"names":[],"mappings":"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"}